{
  "title": "Detecção Automática de Codificação e Decodificador",
  "tabs": {
    "decoder": "Decodificador",
    "encoder": "Codificador"
  },
  "decoder": {
    "inputLabel": "Digite o texto para decodificar",
    "inputPlaceholder": "Entrada direta | Arrastar e soltar | Use o botão de carregamento de arquivo para inserir texto...",
    "outputLabel": "Resultado da decodificação",
    "encodingTypeLabel": "Codificação detectada",
    "beautifyLabel": "Embelezar",
    "hexViewLabel": "Visualização HEX",
    "imageViewLabel": "Visualização de imagem",
    "description": "O decodificador automático detecta o método de codificação do texto inserido e o restaura ao texto original.",
    "copyTooltip": "Copiar resultado da decodificação",
    "downloadTooltip": "Salvar resultado da decodificação em arquivo",
    "binaryOutputLabel": "Saída de dados binários",
    "imageSaveTooltip": "Salvar imagem em arquivo"
  },
  "encoder": {
    "inputLabel": "Digite o texto para codificar",
    "inputPlaceholder": "Entrada direta | Arrastar e soltar | Use o botão de carregamento de arquivo para inserir texto...",
    "resultLabel": "Resultado da codificação",
    "algorithmDescription": "Descrição do algoritmo",
    "description": "Você pode selecionar vários algoritmos para codificar texto no formato desejado.",
    "textInputLabel": "Entrada de texto simples",
    "copyTooltip": "Copiar resultado da codificação",
    "downloadTooltip": "Salvar resultado da codificação em arquivo"
  },
  "buttons": {
    "copy": "Copiar",
    "download": "Salvar arquivo",
    "paste": "Colar",
    "clear": "Limpar",
    "fileLoad": "Carregar arquivo",
    "inputClear": "Limpar entrada",
    "hexCopy": "Copiar Hex",
    "imageSave": "Salvar arquivo"
  },
  "messages": {
    "copySuccess": "Copiado para a área de transferência.",
    "copyError": "Falha ao copiar.",
    "binaryNotCopyable": "Dados binários não podem ser copiados.",
    "downloadSuccess": "Arquivo salvo com sucesso.",
    "downloadError": "Falha ao salvar arquivo.",
    "pasteSuccess": "Colagem concluída",
    "pasteError": "Falha ao colar.",
    "clearSuccess": "Conteúdo limpo.",
    "imageSaveSuccess": "Imagem salva com sucesso.",
    "cannotDecode": "Não é possível decodificar os dados.",
    "noData": "Nenhum dado para decodificar."
  },
  "common": {
    "privacyNote": "A entrada é processada apenas no navegador e não é armazenada.",
    "supportedEncodings": "Codificações suportadas",
    "cborDecoded": "Resultado da decodificação CBOR",
    "cborDiagnosticNotation": "Notação de diagnóstico CBOR",
    "language": "Idioma",
    "korean": "한국어",
    "english": "English",
    "japanese": "日本語",
    "chinese_simplified": "简体中文",
    "chinese_traditional": "繁體中文",
    "spanish": "Español",
    "french": "Français",
    "german": "Deutsch",
    "russian": "Русский",
    "portuguese": "Português",
    "italian": "Italiano",
    "dragMessage": "Solte arquivos aqui para inserir conteúdo",
    "binaryDataDescription": "Dados binários (incluindo caracteres de controle não visíveis).",
    "selectEncoding": "Selecionar método de codificação"
  },
  "codecDescriptions": {
    "CBOR": "CBOR (Representação de Objeto Binário Concisa) é um formato de serialização de dados binários definido na RFC 8949. É mais eficiente que JSON e suporta vários tipos de dados (inteiros, números de ponto flutuante, arrays de bytes, datas, etc.). Usado como alternativa ao JSON em IoT, APIs web, armazenamento de dados, etc.",
    "Hex (Base16)": "A codificação Hex (hexadecimal/Base16) representa cada byte (8 bits) como dois caracteres hexadecimais (0-9, A-F). Usada para transmitir ou armazenar dados binários com segurança como texto, comumente vista em códigos de cor (#FF0000), endereços MAC, valores hash criptográficos, etc. Exemplo: 'A' → 41, 'ABC' → 414243",
    "Base64": "Base64 codifica dados binários de 8 bits usando 64 caracteres ASCII seguros (A-Z, a-z, 0-9, +, /). Amplamente usado em anexos de email, URLs de dados web (data:image/png;base64,...), JSON Web Token, comunicações API, etc. Converte 3 bytes em 4 caracteres, aumentando o tamanho em cerca de 33%.",
    "Base64URL": "Base64URL é uma variante URL-safe do Base64, substituindo caracteres que causam problemas em URLs e nomes de arquivo. Substitui '+' por '-', '/' por '_' e remove o padding ('='). Usado para transmitir com segurança dados binários em JWT (JSON Web Token), tokens OAuth, parâmetros URL.",
    "URL Encoding": "Codificação URL (codificação de porcentagem) converte caracteres que têm significado especial ou são inseguros em URLs para o formato %XX. Espaços tornam-se %20, texto português é convertido para UTF-8 e cada byte é representado como %XX. Essencial para transmissão de dados de formulários web, strings de consulta, APIs REST. Exemplo: 'olá' → %6F%6C%C3%A1",
    "HTML Entities": "Entidades HTML são usadas para representar com segurança caracteres que têm significado especial em HTML. Codificadas como &lt;(<), &gt;(>), &amp;(&), &quot;(\"), &#número; formato. Usadas para prevenção de ataques XSS no desenvolvimento web, exibição de caracteres especiais em documentos XML/HTML, templates HTML de email.",
    "Unicode Escape (\\uXXXX)": "Escape Unicode representa caracteres Unicode como formato \\uXXXX com hexadecimal de 4 dígitos. Usado para representar com segurança caracteres não-ASCII em linguagens de programação como JavaScript, JSON, Java, C#. Exemplo: 'ã' → \\u00E3, '☃' → \\u2603. Frequentemente encontrado em arquivos de internacionalização (i18n) ou análise de logs.",
    "UTF-8": "UTF-8 codifica caracteres Unicode com comprimento variável de 1-4 bytes. Totalmente compatível com ASCII (caracteres ASCII são 1 byte), pode representar todas as linguagens do mundo, tornando-se a codificação padrão da web. Português é geralmente codificado em 1-2 bytes. Exemplo: 'A' → 0x41 (1 byte), 'ã' → 0xC3 0xA3 (2 bytes)",
    "Quoted-Printable": "Quoted-Printable é um método de codificação projetado para transmissão de email, representando caracteres não-ASCII como formato =XX. Mantém a legibilidade do texto ASCII enquanto codifica caracteres especiais com segurança. Principalmente usado em codificação MIME de email e cabeçalhos HTTP. Exemplo: '=' → =3D, caracteres portugueses → =C3=A3",
    "JWT": "JWT (JSON Web Token) é um formato de token compacto e URL-safe para transmitir informações com segurança entre partes. Consiste em três partes separadas por pontos: Header.Payload.Signature. Usado para autenticação, autorização e troca de informações em aplicações web e APIs.",
    "Plain Text": "Texto simples exibe a entrada como está, sem decodificação. Usado quando a entrada não corresponde a nenhum formato de codificação específico ou quando você quer ver o texto original diretamente."
  }
}