{
  "title": "Rilevamento Automatico Codifica e Decodificatore",
  "meta": {
    "description": "Strumento online gratuito che rileva e converte automaticamente vari formati di codifica (UTF-8, EUC-KR, Base64, codifica URL, ecc.).",
    "keywords": "codifica, decodifica, UTF-8, EUC-KR, Base64, codifica URL, conversione testo, codifica caratteri"
  },
  "tabs": {
    "decoder": "Decodificatore",
    "encoder": "Codificatore"
  },
  "decoder": {
    "inputLabel": "Inserisci il testo da decodificare",
    "inputPlaceholder": "Input diretto | Trascinamento | Usa il pulsante di caricamento file per inserire testo...",
    "outputLabel": "Risultato decodifica",
    "encodingTypeLabel": "Codifica rilevata",
    "beautifyLabel": "Abbellisci",
    "hexViewLabel": "Vista HEX",
    "imageViewLabel": "Vista immagine",
    "description": "Il decodificatore automatico rileva il metodo di codifica del testo inserito e lo ripristina al testo originale.",
    "copyTooltip": "Copia risultato decodifica",
    "downloadTooltip": "Salva risultato decodifica su file",
    "binaryOutputLabel": "Output dati binari",
    "imageSaveTooltip": "Salva immagine su file"
  },
  "encoder": {
    "inputLabel": "Inserisci il testo da codificare",
    "inputPlaceholder": "Input diretto | Trascinamento | Usa il pulsante di caricamento file per inserire testo...",
    "resultLabel": "Risultato codifica",
    "algorithmDescription": "Descrizione algoritmo",
    "description": "Puoi selezionare vari algoritmi per codificare il testo nel formato desiderato.",
    "textInputLabel": "Input testo semplice",
    "copyTooltip": "Copia risultato codifica",
    "downloadTooltip": "Salva risultato codifica su file"
  },
  "buttons": {
    "copy": "Copia",
    "download": "Salva file",
    "paste": "Incolla",
    "clear": "Cancella",
    "fileLoad": "Carica file",
    "inputClear": "Cancella input",
    "hexCopy": "Copia Hex",
    "imageSave": "Salva file"
  },
  "messages": {
    "copySuccess": "Copiato negli appunti.",
    "copyError": "Copia fallita.",
    "binaryNotCopyable": "I dati binari non possono essere copiati.",
    "downloadSuccess": "File salvato con successo.",
    "downloadError": "Salvataggio file fallito.",
    "pasteSuccess": "Incolla completato",
    "pasteError": "Incolla fallito.",
    "clearSuccess": "Contenuto cancellato.",
    "imageSaveSuccess": "Immagine salvata con successo.",
    "cannotDecode": "Impossibile decodificare i dati.",
    "noData": "Nessun dato da decodificare."
  },
  "common": {
    "privacyNote": "L'input viene elaborato solo nel browser e non viene memorizzato.",
    "supportedEncodings": "Codifiche supportate",
    "cborDecoded": "Risultato decodifica CBOR",
    "cborDiagnosticNotation": "Notazione diagnostica CBOR",
    "language": "Lingua",
    "korean": "한국어",
    "english": "English",
    "japanese": "日本語",
    "chinese_simplified": "简体中文",
    "chinese_traditional": "繁體中文",
    "spanish": "Español",
    "french": "Français",
    "german": "Deutsch",
    "russian": "Русский",
    "portuguese": "Português",
    "italian": "Italiano",
    "dragMessage": "Trascina i file qui per inserire contenuto",
    "binaryDataDescription": "Dati binari (inclusi caratteri di controllo non visibili).",
    "selectEncoding": "Seleziona metodo di codifica"
  },
  "codecDescriptions": {
    "CBOR": "CBOR (Rappresentazione Concisa di Oggetti Binari) è un formato di serializzazione di dati binari definito in RFC 8949. È più efficiente di JSON e supporta vari tipi di dati (interi, numeri in virgola mobile, array di byte, date, ecc.). Utilizzato come alternativa a JSON in IoT, API web, archiviazione dati, ecc.",
    "Hex (Base16)": "La codifica Hex (esadecimale/Base16) rappresenta ogni byte (8 bit) come due caratteri esadecimali (0-9, A-F). Utilizzata per trasmettere o memorizzare in modo sicuro dati binari come testo, comunemente vista in codici colore (#FF0000), indirizzi MAC, valori hash crittografici, ecc. Esempio: 'A' → 41, 'ABC' → 414243",
    "Base64": "Base64 codifica dati binari a 8 bit utilizzando 64 caratteri ASCII sicuri (A-Z, a-z, 0-9, +, /). Ampiamente utilizzato in allegati email, URL dati web (data:image/png;base64,...), JSON Web Token, comunicazioni API, ecc. Converte 3 byte in 4 caratteri, aumentando la dimensione di circa il 33%.",
    "Base64URL": "Base64URL è una variante URL-safe di Base64, sostituendo caratteri che causano problemi in URL e nomi file. Sostituisce '+' con '-', '/' con '_' e rimuove il padding ('='). Utilizzato per trasmettere in modo sicuro dati binari in JWT (JSON Web Token), token OAuth, parametri URL.",
    "URL Encoding": "La codifica URL (codifica percentuale) converte caratteri che hanno significato speciale o sono insicuri negli URL nel formato %XX. Gli spazi diventano %20, il testo italiano viene convertito in UTF-8 e ogni byte è rappresentato come %XX. Essenziale per trasmissione dati form web, stringhe di query, API REST. Esempio: 'ciao' → %63%69%61%6F",
    "HTML Entities": "Le entità HTML vengono utilizzate per rappresentare in modo sicuro caratteri che hanno significato speciale in HTML. Codificate come &lt;(<), &gt;(>), &amp;(&), &quot;(\"), &#numero; formato. Utilizzate per prevenzione attacchi XSS nello sviluppo web, visualizzazione caratteri speciali in documenti XML/HTML, template HTML email.",
    "Unicode Escape (\\uXXXX)": "L'escape Unicode rappresenta caratteri Unicode come formato \\uXXXX con esadecimale a 4 cifre. Utilizzato per rappresentare in modo sicuro caratteri non-ASCII in linguaggi di programmazione come JavaScript, JSON, Java, C#. Esempio: 'è' → \\u00E8, '☃' → \\u2603. Spesso incontrato in file di internazionalizzazione (i18n) o analisi log.",
    "UTF-8": "UTF-8 codifica caratteri Unicode con lunghezza variabile 1-4 byte. Completamente compatibile con ASCII (caratteri ASCII sono 1 byte), può rappresentare tutte le lingue del mondo, rendendolo la codifica standard web. L'italiano è generalmente codificato in 1-2 byte. Esempio: 'A' → 0x41 (1 byte), 'è' → 0xC3 0xA8 (2 byte)",
    "Quoted-Printable": "Quoted-Printable è un metodo di codifica progettato per trasmissione email, rappresentando caratteri non-ASCII come formato =XX. Mantiene la leggibilità del testo ASCII mentre codifica in modo sicuro caratteri speciali. Principalmente utilizzato nella codifica MIME email e header HTTP. Esempio: '=' → =3D, caratteri italiani → =C3=A8",
    "JWT": "JWT (JSON Web Token) è un formato token compatto e URL-safe per trasmettere informazioni in modo sicuro tra parti. Consiste di tre parti separate da punti: Header.Payload.Signature. Utilizzato per autenticazione, autorizzazione e scambio informazioni in applicazioni web e API.",
    "Plain Text": "Il testo normale visualizza l'input così com'è senza decodifica. Utilizzato quando l'input non corrisponde a nessun formato di codifica specifico o quando si vuole vedere il testo originale direttamente."
  }
}