{
  "title": "Automatische Kodierungserkennung und Dekoder",
  "meta": {
    "description": "Kostenloses Online-Tool zur automatischen Erkennung und Konvertierung verschiedener Kodierungsformate (UTF-8, EUC-KR, Base64, URL-Kodierung usw.).",
    "keywords": "Kodierung, Dekodierung, UTF-8, EUC-KR, Base64, URL-Kodierung, Textkonvertierung, Zeichenkodierung"
  },
  "tabs": {
    "decoder": "Dekoder",
    "encoder": "Enkoder"
  },
  "decoder": {
    "inputLabel": "Text zum Dekodieren eingeben",
    "inputPlaceholder": "Direkte Eingabe | Drag & Drop | Datei-Laden-Button verwenden, um Text einzugeben...",
    "outputLabel": "Dekodierungsergebnis",
    "encodingTypeLabel": "Erkannte Kodierung",
    "beautifyLabel": "Verschönern",
    "hexViewLabel": "HEX-Ansicht",
    "imageViewLabel": "Bildansicht",
    "description": "Der automatische Dekoder erkennt die Kodierungsmethode des eingegebenen Textes und stellt ihn zum ursprünglichen Text wieder her.",
    "copyTooltip": "Dekodierungsergebnis kopieren",
    "downloadTooltip": "Dekodierungsergebnis in Datei speichern",
    "binaryOutputLabel": "Binärdatenausgabe",
    "imageSaveTooltip": "Bild in Datei speichern"
  },
  "encoder": {
    "inputLabel": "Text zum Kodieren eingeben",
    "inputPlaceholder": "Direkte Eingabe | Drag & Drop | Datei-Laden-Button verwenden, um Text einzugeben...",
    "resultLabel": "Kodierungsergebnis",
    "algorithmDescription": "Algorithmusbeschreibung",
    "description": "Sie können verschiedene Algorithmen auswählen, um Text im gewünschten Format zu kodieren.",
    "textInputLabel": "Klartexteingabe",
    "copyTooltip": "Kodierungsergebnis kopieren",
    "downloadTooltip": "Kodierungsergebnis in Datei speichern"
  },
  "buttons": {
    "copy": "Kopieren",
    "download": "Datei speichern",
    "paste": "Einfügen",
    "clear": "Löschen",
    "fileLoad": "Datei laden",
    "inputClear": "Eingabe löschen",
    "hexCopy": "Hex kopieren",
    "imageSave": "Datei speichern"
  },
  "messages": {
    "copySuccess": "In die Zwischenablage kopiert.",
    "copyError": "Kopieren fehlgeschlagen.",
    "binaryNotCopyable": "Binärdaten können nicht kopiert werden.",
    "downloadSuccess": "Datei erfolgreich gespeichert.",
    "downloadError": "Datei speichern fehlgeschlagen.",
    "pasteSuccess": "Einfügen abgeschlossen",
    "pasteError": "Einfügen fehlgeschlagen.",
    "clearSuccess": "Inhalt gelöscht.",
    "imageSaveSuccess": "Bild erfolgreich gespeichert.",
    "cannotDecode": "Daten können nicht dekodiert werden.",
    "noData": "Keine Daten zum Dekodieren."
  },
  "common": {
    "privacyNote": "Eingabe wird nur im Browser verarbeitet und nicht gespeichert.",
    "supportedEncodings": "Unterstützte Kodierungen",
    "cborDecoded": "CBOR-Dekodierungsergebnis",
    "cborDiagnosticNotation": "CBOR-Diagnosenotation",
    "language": "Sprache",
    "korean": "한국어",
    "english": "English",
    "japanese": "日本語",
    "chinese_simplified": "简体中文",
    "chinese_traditional": "繁體中文",
    "spanish": "Español",
    "french": "Français",
    "german": "Deutsch",
    "russian": "Русский",
    "portuguese": "Português",
    "italian": "Italiano",
    "dragMessage": "Dateien hier ablegen, um Inhalt einzugeben",
    "binaryDataDescription": "Binärdaten (einschließlich nicht sichtbarer Steuerzeichen).",
    "selectEncoding": "Kodierungsmethode auswählen"
  },
  "codecDescriptions": {
    "CBOR": "CBOR (Concise Binary Object Representation) ist ein binäres Datenserialisierungsformat, das in RFC 8949 definiert ist. Es ist effizienter als JSON und unterstützt verschiedene Datentypen (Ganzzahlen, Gleitkommazahlen, Byte-Arrays, Daten usw.). Wird als Alternative zu JSON in IoT, Web-APIs, Datenspeicherung usw. verwendet.",
    "Hex (Base16)": "Hex (Hexadezimal/Base16) Kodierung stellt jedes Byte (8 Bits) als zwei Hexadezimalzeichen (0-9, A-F) dar. Wird verwendet, um binäre Daten sicher als Text zu übertragen oder zu speichern, häufig in Farbcodes (#FF0000), MAC-Adressen, kryptographischen Hash-Werten usw. gesehen. Beispiel: 'A' → 41, 'ABC' → 414243",
    "Base64": "Base64 kodiert 8-Bit-Binärdaten mit 64 sicheren ASCII-Zeichen (A-Z, a-z, 0-9, +, /). Weit verbreitet in E-Mail-Anhängen, Web-Daten-URLs (data:image/png;base64,...), JSON Web Token, API-Kommunikation usw. Konvertiert 3 Bytes in 4 Zeichen, wodurch die Größe um etwa 33% zunimmt.",
    "Base64URL": "Base64URL ist eine URL-sichere Variante von Base64, die Zeichen ersetzt, die in URLs und Dateinamen Probleme verursachen. Ersetzt '+' durch '-', '/' durch '_' und entfernt Padding ('='). Wird verwendet, um binäre Daten sicher in JWT (JSON Web Token), OAuth-Token, URL-Parametern zu übertragen.",
    "URL Encoding": "URL-Kodierung (Prozent-Kodierung) konvertiert Zeichen, die in URLs eine besondere Bedeutung haben oder unsicher sind, in das %XX-Format. Leerzeichen werden zu %20, deutscher Text wird in UTF-8 konvertiert und jedes Byte als %XX dargestellt. Unerlässlich für Web-Formulardatenübertragung, Query-Strings, REST-APIs. Beispiel: 'hallo' → %68%61%6C%6C%6F",
    "HTML Entities": "HTML-Entitäten werden verwendet, um Zeichen, die in HTML eine besondere Bedeutung haben, sicher darzustellen. Kodiert als &lt;(<), &gt;(>), &amp;(&), &quot;(\"), &#Nummer; Format. Verwendet für XSS-Angriffsprävention in der Webentwicklung, Anzeige von Sonderzeichen in XML/HTML-Dokumenten, E-Mail-HTML-Vorlagen.",
    "Unicode Escape (\\uXXXX)": "Unicode-Escape stellt Unicode-Zeichen als \\uXXXX-Format mit 4-stelliger Hexadezimalzahl dar. Wird verwendet, um Nicht-ASCII-Zeichen in Programmiersprachen wie JavaScript, JSON, Java, C# sicher darzustellen. Beispiel: 'ä' → \\u00E4, '☃' → \\u2603. Oft in Internationalisierungs-(i18n)-Dateien oder Protokollanalysen anzutreffen.",
    "UTF-8": "UTF-8 kodiert Unicode-Zeichen mit variabler Länge von 1-4 Bytes. Vollständig kompatibel mit ASCII (ASCII-Zeichen sind 1 Byte), kann alle Sprachen der Welt darstellen und ist damit die Web-Standard-Kodierung. Deutsch wird normalerweise in 1-2 Bytes kodiert. Beispiel: 'A' → 0x41 (1 Byte), 'ä' → 0xC3 0xA4 (2 Bytes)",
    "Quoted-Printable": "Quoted-Printable ist eine für E-Mail-Übertragung entwickelte Kodierungsmethode, die Nicht-ASCII-Zeichen als =XX-Format darstellt. Erhält die Lesbarkeit von ASCII-Text bei sicherer Kodierung von Sonderzeichen. Hauptsächlich in E-Mail-MIME-Kodierung und HTTP-Headern verwendet. Beispiel: '=' → =3D, deutsche Zeichen → =C3=A4",
    "JWT": "JWT (JSON Web Token) ist ein kompaktes, URL-sicheres Token-Format für die sichere Übertragung von Informationen zwischen Parteien. Besteht aus drei durch Punkte getrennten Teilen: Header.Payload.Signature. Verwendet für Authentifizierung, Autorisierung und Informationsaustausch in Webanwendungen und APIs.",
    "Plain Text": "Nur-Text zeigt die Eingabe ohne Dekodierung an. Wird verwendet, wenn die Eingabe keinem spezifischen Kodierungsformat entspricht oder wenn Sie den ursprünglichen Text direkt sehen möchten."
  }
}