{
  "title": "Detección Automática de Codificación y Decodificador",
  "tabs": {
    "decoder": "Decodificador",
    "encoder": "Codificador"
  },
  "decoder": {
    "inputLabel": "Ingrese el texto a decodificar",
    "inputPlaceholder": "Entrada directa | Arrastrar y soltar | Use el botón de cargar archivo para ingresar texto...",
    "outputLabel": "Resultado de decodificación",
    "encodingTypeLabel": "Codificación detectada",
    "beautifyLabel": "Embellecer",
    "hexViewLabel": "Vista HEX",
    "imageViewLabel": "Vista de imagen",
    "description": "El decodificador automático detecta el método de codificación del texto ingresado y lo restaura al texto original.",
    "copyTooltip": "Copiar resultado de decodificación",
    "downloadTooltip": "Guardar resultado de decodificación en archivo",
    "binaryOutputLabel": "Salida de datos binarios",
    "imageSaveTooltip": "Guardar imagen en archivo"
  },
  "encoder": {
    "inputLabel": "Ingrese el texto a codificar",
    "inputPlaceholder": "Entrada directa | Arrastrar y soltar | Use el botón de cargar archivo para ingresar texto...",
    "resultLabel": "Resultado de codificación",
    "algorithmDescription": "Descripción del algoritmo",
    "description": "Puede seleccionar varios algoritmos para codificar texto en el formato deseado.",
    "textInputLabel": "Entrada de texto plano",
    "copyTooltip": "Copiar resultado de codificación",
    "downloadTooltip": "Guardar resultado de codificación en archivo"
  },
  "buttons": {
    "copy": "Copiar",
    "download": "Guardar archivo",
    "paste": "Pegar",
    "clear": "Limpiar",
    "fileLoad": "Cargar archivo",
    "inputClear": "Limpiar entrada",
    "hexCopy": "Copiar Hex",
    "imageSave": "Guardar archivo"
  },
  "messages": {
    "copySuccess": "Copiado al portapapeles.",
    "copyError": "Error al copiar.",
    "binaryNotCopyable": "Los datos binarios no se pueden copiar.",
    "downloadSuccess": "Archivo guardado exitosamente.",
    "downloadError": "Error al guardar el archivo.",
    "pasteSuccess": "Pegado completado",
    "pasteError": "Error al pegar.",
    "clearSuccess": "Contenido limpiado.",
    "imageSaveSuccess": "Imagen guardada exitosamente.",
    "cannotDecode": "No se pueden decodificar los datos.",
    "noData": "No hay datos para decodificar."
  },
  "common": {
    "privacyNote": "La entrada se procesa solo en el navegador y no se almacena.",
    "supportedEncodings": "Codificaciones compatibles",
    "cborDecoded": "Resultado de decodificación CBOR",
    "cborDiagnosticNotation": "Notación de diagnóstico CBOR",
    "language": "Idioma",
    "korean": "한국어",
    "english": "English",
    "japanese": "日本語",
    "chinese_simplified": "简体中文",
    "chinese_traditional": "繁體中文",
    "spanish": "Español",
    "french": "Français",
    "german": "Deutsch",
    "russian": "Русский",
    "portuguese": "Português",
    "italian": "Italiano",
    "dragMessage": "Suelte archivos aquí para ingresar contenido",
    "binaryDataDescription": "Datos binarios (incluidos caracteres de control no visibles).",
    "selectEncoding": "Seleccionar método de codificación"
  },
  "codecDescriptions": {
    "CBOR": "CBOR (Representación Concisa de Objetos Binarios) es un formato de serialización de datos binarios definido en RFC 8949. Es más eficiente que JSON y admite varios tipos de datos (enteros, números de punto flotante, matrices de bytes, fechas, etc.). Se utiliza como alternativa a JSON en IoT, API web, almacenamiento de datos, etc.",
    "Hex (Base16)": "La codificación Hex (hexadecimal/Base16) representa cada byte (8 bits) como dos caracteres hexadecimales (0-9, A-F). Se utiliza para transmitir o almacenar de forma segura datos binarios como texto, comúnmente visto en códigos de color (#FF0000), direcciones MAC, valores hash criptográficos, etc. Ejemplo: 'A' → 41, 'ABC' → 414243",
    "Base64": "Base64 codifica datos binarios de 8 bits utilizando 64 caracteres ASCII seguros (A-Z, a-z, 0-9, +, /). Ampliamente utilizado en archivos adjuntos de correo electrónico, URL de datos web (data:image/png;base64,...), JSON Web Tokens, comunicaciones API, etc. Convierte 3 bytes en 4 caracteres, aumentando el tamaño en aproximadamente 33%.",
    "Base64URL": "Base64URL es una variante segura para URL de Base64, reemplazando caracteres que causan problemas en URL y nombres de archivo. Reemplaza '+' con '-', '/' con '_' y elimina el relleno ('='). Se utiliza para transmitir de forma segura datos binarios en JWT (JSON Web Token), tokens OAuth, parámetros URL.",
    "URL Encoding": "La codificación URL (codificación de porcentaje) convierte caracteres que tienen significado especial o son inseguros en URL al formato %XX. Los espacios se convierten en %20, el texto en español se convierte a UTF-8 y cada byte se representa como %XX. Esencial para transmisión de datos de formularios web, cadenas de consulta, API REST. Ejemplo: 'hola' → %68%6F%6C%61",
    "HTML Entities": "Las entidades HTML se utilizan para representar de forma segura caracteres que tienen significado especial en HTML. Codificadas como &lt;(<), &gt;(>), &amp;(&), &quot;(\"), &#número; formato. Utilizadas para prevención de ataques XSS en desarrollo web, visualización de caracteres especiales en documentos XML/HTML, plantillas HTML de correo electrónico.",
    "Unicode Escape (\\uXXXX)": "El escape Unicode representa caracteres Unicode como formato \\uXXXX con hexadecimal de 4 dígitos. Se utiliza para representar de forma segura caracteres no ASCII en lenguajes de programación como JavaScript, JSON, Java, C#. Ejemplo: 'ñ' → \\u00F1, '☃' → \\u2603. A menudo encontrado en archivos de internacionalización (i18n) o análisis de registros.",
    "UTF-8": "UTF-8 codifica caracteres Unicode con longitud variable de 1-4 bytes. Completamente compatible con ASCII (los caracteres ASCII son de 1 byte), puede representar todos los idiomas del mundo, convirtiéndolo en la codificación estándar web. El español generalmente se codifica como 1-2 bytes. Ejemplo: 'A' → 0x41 (1 byte), 'ñ' → 0xC3 0xB1 (2 bytes)",
    "Quoted-Printable": "Quoted-Printable es un método de codificación diseñado para transmisión de correo electrónico, representando caracteres no ASCII como formato =XX. Mantiene la legibilidad del texto ASCII mientras codifica de forma segura caracteres especiales. Principalmente utilizado en codificación MIME de correo electrónico y encabezados HTTP. Ejemplo: '=' → =3D, caracteres españoles → =C3=B1",
    "JWT": "JWT (JSON Web Token) es un formato de token compacto y seguro para URL para transmitir de forma segura información entre partes. Consiste en tres partes separadas por puntos: Header.Payload.Signature. Utilizado para autenticación, autorización e intercambio de información en aplicaciones web y API.",
    "Plain Text": "El texto plano muestra la entrada tal como está sin ninguna decodificación. Se utiliza cuando la entrada no coincide con ningún formato de codificación específico o cuando se desea ver el texto original directamente."
  }
}