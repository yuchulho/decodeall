{
  "title": "Автоматическое определение кодировки и декодер",
  "tabs": {
    "decoder": "Декодер",
    "encoder": "Кодировщик"
  },
  "decoder": {
    "inputLabel": "Введите текст для декодирования",
    "inputPlaceholder": "Прямой ввод | Перетащите файл | Используйте кнопку загрузки файла для ввода текста...",
    "outputLabel": "Результат декодирования",
    "encodingTypeLabel": "Обнаруженная кодировка",
    "beautifyLabel": "Форматировать",
    "hexViewLabel": "HEX-просмотр",
    "imageViewLabel": "Просмотр изображения",
    "description": "Автоматический декодер определяет метод кодирования введенного текста и восстанавливает его до исходного текста.",
    "copyTooltip": "Копировать результат декодирования",
    "downloadTooltip": "Сохранить результат декодирования в файл",
    "binaryOutputLabel": "Вывод бинарных данных",
    "imageSaveTooltip": "Сохранить изображение в файл"
  },
  "encoder": {
    "inputLabel": "Введите текст для кодирования",
    "inputPlaceholder": "Прямой ввод | Перетащите файл | Используйте кнопку загрузки файла для ввода текста...",
    "resultLabel": "Результат кодирования",
    "algorithmDescription": "Описание алгоритма",
    "description": "Вы можете выбрать различные алгоритмы для кодирования текста в желаемом формате.",
    "textInputLabel": "Ввод обычного текста",
    "copyTooltip": "Копировать результат кодирования",
    "downloadTooltip": "Сохранить результат кодирования в файл"
  },
  "buttons": {
    "copy": "Копировать",
    "download": "Сохранить файл",
    "paste": "Вставить",
    "clear": "Очистить",
    "fileLoad": "Загрузить файл",
    "inputClear": "Очистить ввод",
    "hexCopy": "Копировать Hex",
    "imageSave": "Сохранить файл"
  },
  "messages": {
    "copySuccess": "Скопировано в буфер обмена.",
    "copyError": "Не удалось скопировать.",
    "binaryNotCopyable": "Бинарные данные нельзя скопировать.",
    "downloadSuccess": "Файл успешно сохранен.",
    "downloadError": "Не удалось сохранить файл.",
    "pasteSuccess": "Вставка завершена",
    "pasteError": "Не удалось вставить.",
    "clearSuccess": "Содержимое очищено.",
    "imageSaveSuccess": "Изображение успешно сохранено.",
    "cannotDecode": "Невозможно декодировать данные.",
    "noData": "Нет данных для декодирования."
  },
  "common": {
    "privacyNote": "Ввод обрабатывается только в браузере и не сохраняется.",
    "supportedEncodings": "Поддерживаемые кодировки",
    "cborDecoded": "Результат декодирования CBOR",
    "cborDiagnosticNotation": "Диагностическая нотация CBOR",
    "language": "Язык",
    "korean": "한국어",
    "english": "English",
    "japanese": "日本語",
    "chinese_simplified": "简体中文",
    "chinese_traditional": "繁體中文",
    "spanish": "Español",
    "french": "Français",
    "german": "Deutsch",
    "russian": "Русский",
    "portuguese": "Português",
    "italian": "Italiano",
    "dragMessage": "Перетащите файлы сюда для ввода содержимого",
    "binaryDataDescription": "Бинарные данные (включая невидимые управляющие символы).",
    "selectEncoding": "Выберите метод кодирования"
  },
  "codecDescriptions": {
    "CBOR": "CBOR (Краткое представление бинарных объектов) - это формат сериализации бинарных данных, определенный в RFC 8949. Более эффективен, чем JSON, и поддерживает различные типы данных (целые числа, числа с плавающей точкой, массивы байтов, даты и т.д.). Используется как альтернатива JSON в IoT, веб-API, хранении данных и т.д.",
    "Hex (Base16)": "Hex (шестнадцатеричное/Base16) кодирование представляет каждый байт (8 бит) как два шестнадцатеричных символа (0-9, A-F). Используется для безопасной передачи или хранения бинарных данных в виде текста, часто встречается в цветовых кодах (#FF0000), MAC-адресах, криптографических хеш-значениях и т.д. Пример: 'A' → 41, 'ABC' → 414243",
    "Base64": "Base64 кодирует 8-битные бинарные данные, используя 64 безопасных ASCII символа (A-Z, a-z, 0-9, +, /). Широко используется в почтовых вложениях, веб-URL данных (data:image/png;base64,...), JSON Web Token, API-коммуникациях и т.д. Преобразует 3 байта в 4 символа, увеличивая размер примерно на 33%.",
    "Base64URL": "Base64URL - это URL-безопасный вариант Base64, заменяющий символы, которые вызывают проблемы в URL и именах файлов. Заменяет '+' на '-', '/' на '_' и удаляет заполнение ('='). Используется для безопасной передачи бинарных данных в JWT (JSON Web Token), OAuth токенах, URL параметрах.",
    "URL Encoding": "URL кодирование (процентное кодирование) преобразует символы, имеющие специальное значение или небезопасные в URL, в формат %XX. Пробелы становятся %20, русский текст преобразуется в UTF-8, и каждый байт представляется как %XX. Необходимо для передачи данных веб-форм, строк запросов, REST API. Пример: 'привет' → %D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82",
    "HTML Entities": "HTML сущности используются для безопасного представления символов, имеющих специальное значение в HTML. Кодируются как &lt;(<), &gt;(>), &amp;(&), &quot;(\"), &#число; формат. Используются для предотвращения XSS атак в веб-разработке, отображения специальных символов в XML/HTML документах, HTML шаблонах электронной почты.",
    "Unicode Escape (\\uXXXX)": "Unicode экранирование представляет Unicode символы в формате \\uXXXX с 4-значным шестнадцатеричным числом. Используется для безопасного представления не-ASCII символов в языках программирования, таких как JavaScript, JSON, Java, C#. Пример: 'я' → \\u044F, '☃' → \\u2603. Часто встречается в файлах интернационализации (i18n) или анализе логов.",
    "UTF-8": "UTF-8 кодирует Unicode символы переменной длиной 1-4 байта. Полностью совместим с ASCII (ASCII символы составляют 1 байт), может представлять все языки мира, что делает его стандартной веб-кодировкой. Русский обычно кодируется 2 байтами. Пример: 'A' → 0x41 (1 байт), 'я' → 0xD1 0x8F (2 байта)",
    "Quoted-Printable": "Quoted-Printable - это метод кодирования, разработанный для передачи электронной почты, представляющий не-ASCII символы в формате =XX. Сохраняет читаемость ASCII текста при безопасном кодировании специальных символов. Используется в основном в MIME кодировании электронной почты и HTTP заголовках. Пример: '=' → =3D, русские символы → =D1=8F",
    "JWT": "JWT (JSON Web Token) - это компактный, URL-безопасный формат токена для безопасной передачи информации между сторонами. Состоит из трех частей, разделенных точками: Header.Payload.Signature. Используется для аутентификации, авторизации и обмена информацией в веб-приложениях и API.",
    "Plain Text": "Простой текст отображает ввод как есть без декодирования. Используется, когда ввод не соответствует какому-либо конкретному формату кодирования или когда вы хотите увидеть исходный текст напрямую."
  }
}